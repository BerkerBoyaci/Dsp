{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi *n / 5) \n",
    "\n",
    "L = 5 \n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "\n",
    "\n",
    "# sık örnekleme işlemi ->\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')\n",
    "\n",
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "                \n",
    "        \n",
    "# xd[n] ->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi *n / 5) \n",
    "\n",
    "L = 5 \n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "\n",
    "\n",
    "# sık örnekleme işlemi ->\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')\n",
    "\n",
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "                \n",
    "        \n",
    "# xd[n] ->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi *n / 5) \n",
    "\n",
    "L = 5 \n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "\n",
    "\n",
    "# sık örnekleme işlemi ->\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')\n",
    "\n",
    "\n",
    "        \n",
    "# xd[n] ->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi *n / 5) \n",
    "\n",
    "L = 5 \n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi *n / 5) \n",
    "\n",
    "\n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi * n / 5) \n",
    "\n",
    "\n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi * n / 5) \n",
    "print(xn)\n",
    "\n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , 2 * N ) \n",
    "xn = np.cos( np.pi * n / 5) \n",
    "print(len(xn))\n",
    "\n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "print(xn_u)\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "#xn_u[::L] = xn\n",
    "print(xn_u[::L])\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "#xn_u[::L] = xn\n",
    "print(len(xn_u[::L)])\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "#xn_u[::L] = xn\n",
    "print(len(xn_u[::L]))\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , N ) \n",
    "xn = np.cos( np.pi * n / 5) \n",
    "\n",
    "M = 4\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "\"\"\"\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    " \"\"\"             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "#n_i = np.arange(len(xn_i)\n",
    "                \n",
    "\"\"\"\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "\"\"\"             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "#n_i = np.arange(len(xn_i)\n",
    "                \n",
    "\"\"\"\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "\"\"\"             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i)\n",
    "                \n",
    "\"\"\"\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "\"\"\"             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i))\n",
    "                \n",
    "\"\"\"\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "\"\"\"             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "n_i = np.arange(len(xn_i))\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , N ) \n",
    "xn = np.cos( np.pi * n / 5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "n_i = np.arange(len(xn_i))\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xd_n[] ->\n",
    "# seyrek örnekleme ->\n",
    "\n",
    "M = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , N ) \n",
    "xn = np.cos( np.pi * n / 5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sık örnekleme işlemi ->\n",
    "L = 5 \n",
    "\n",
    "# xu[n] ->\n",
    "Nn_u = N * L\n",
    "xn_u = np.zeros(Nn_u)\n",
    "\n",
    "xn_u[::L] = xn\n",
    "n_u = np.arange(0, Nn_u)\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_u, xn_u , use_line_collection='True')\n",
    "plt.ylabel('$x_u[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xi[] ->\n",
    "h_lin = np.array([0,1/5,2/5,3/5,4/5,1,4/5,3/5,2/5,1/5,0]) \n",
    "xn_i = np.convolve( xn_u , h_lin , 'same')\n",
    "\n",
    "n_i = np.arange(len(xn_i))\n",
    "                \n",
    "plt.figure()\n",
    "plt.stem( n_i , xn_i , use_line_collection='True')\n",
    "plt.xlabel(\"n (örnek)\")\n",
    "plt.ylabel(\"$x_i[n]$\")\n",
    "plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xd_n[] ->\n",
    "# seyrek örnekleme ->\n",
    "\n",
    "M = 4\n",
    "\n",
    "xn_d = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# xd_n[] ->\n",
    "# seyrek örnekleme ->\n",
    "\n",
    "M = 4\n",
    "\n",
    "xn_d = xn_i[::M]\n",
    "n_d = np.arange(len(xn_d))\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n_d, xn_d , use_line_collection='True') \n",
    "plt.ylabel('$x_d[n]$')\n",
    "plt.xlabel('n (örnek)') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "Fs = 40000\n",
    "Ts = 1 / Fs\n",
    "N = 20\n",
    "\n",
    "n = np.arange( 0 , N ) \n",
    "xn = np.cos( np.pi * n / 5) \n",
    "\n",
    "\n",
    "plt.figure()\n",
    "plt.stem(n, xn , use_line_collection='True')\n",
    "plt.ylabel('$x[n]$')\n",
    "plt.xlabel('n (örnek)')"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 2
}
